@startuml
'https://plantuml.com/class-diagram

abstract class AbstractProp
{
    # int bounceNum
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + work(HeroAircraft heroAircraft):void
    + forward():void
}

class BloodProp {
    - int plusHp
    + BloodProp(int locationX, int locationY, int speedX, int speedY)
    + work():void
}

class BombProp{
    - List<CanBoom> canBoomList
    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + addCanBoom(CanBoom canBoom) : void
    + removeCanBoom(CanBoom canBoom) : void
    + notifyAllToBoom() : void
    + work() : void
}

class BulletProp{
    - int bulletNumAdd
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
    + work():void
}

interface ProduceProp{
    produceProp(int locationX, int locationY):AbstractProp
}

class BloodPropFactory{
    + produceProp(int locationX, int locationY):AbstractProp
}

class BombPropFactory{
    + produceProp(int locationX, int locationY):AbstractProp
}

class BulletPropFactory{
    + produceProp(int locationX, int locationY):AbstractProp
}

AbstractProp <|-- BloodProp
AbstractProp <|-- BombProp
AbstractProp <|-- BulletProp

ProduceProp <|.. BloodPropFactory
ProduceProp <|.. BombPropFactory
ProduceProp <|.. BulletPropFactory


BloodProp <.. BloodPropFactory : produce
BombProp <.. BombPropFactory : produce
BulletProp <.. BulletPropFactory : produce
@enduml