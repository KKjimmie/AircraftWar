@startuml
'https://plantuml.com/class-diagram

abstract class AbstractAircraft
{
	# int maxHp
    # int hp
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + getMaxHp:int
    + shoot():List<BaseBullet>

}
class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
}

class EliteEnemy {
    - int power
    - int direction
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + genProp():AbstractProp
}

class Boss {
    - int shootNum
    - int power
    - int direction
    + Boss(int locationX, int locationY, int speedX, int speedY, int hp)
    + genProp():AbstractProp
    + shoot():List<BaseBullet>
}

interface produceEmeny{
    produceEnemy():AbstractAircraft
}

class MobEnemyFactory{
    + produceEnemy():AbstractAircraft
}

class EliteEnemyFactory{
    + produceEnemy():AbstractAircraft
}

class BossFactory{
    - int bossLevel
    - bossLevelUp():void
    - getBossLevel():int
    - setBossLevel():void
    + produceEnemy():AbstractAircraft
}

AbstractAircraft <|-- MobEnemy
AbstractAircraft <|-- EliteEnemy
AbstractAircraft <|-- Boss

produceEmeny <|.. MobEnemyFactory
produceEmeny <|.. EliteEnemyFactory
produceEmeny <|.. BossFactory

MobEnemy <.. MobEnemyFactory : produce
EliteEnemy <.. EliteEnemyFactory : produce
Boss <.. BossFactory :produce

@enduml